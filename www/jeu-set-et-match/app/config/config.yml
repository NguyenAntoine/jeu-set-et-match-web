imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: fr

framework:
    #esi: ~
    translator: ~
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    serializer: { enable_annotations: true }
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true
    templating:
        engines: ['twig']

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: '%kernel.project_dir%/var/data/data.sqlite'
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool: { type: memory }

# FOS User
fos_user:
    db_driver: orm
    firewall_name: main
    user_class: AppBundle\Entity\User
    from_email:
        address: "%mailer_user%"
        sender_name: "%mailer_user%"
    registration:
        confirmation:
            enabled: true

# FOS Rest
fos_rest:
    zone:
        - { path: ^/rest/* }
    routing_loader:
        default_format: json
    view:
        view_response_listener: true
        formats:
            json: true
            xml: false
    format_listener:
        rules:
            - { path: '^/', priorities: ['json'], fallback_format: 'json' }
    param_fetcher_listener: force

easy_admin:
    site_name: 'Jeu Set et Match'
    entities:
        User:
            class: AppBundle\Entity\User
            list:
                fields: ['id', 'username', 'firstName', 'lastName', 'dateOfBirth', 'phoneNumber', 'roles', 'email', 'lastLogin', 'enabled']
            new:
                fields:
                    - username
                    - email
                    - firstName
                    - lastName
                    - dateOfBirth
                    - phoneNumber
                    - enabled
                    # if administrators are allowed to edit users' passwords and roles, add this:
                    - { property: 'plainPassword', type: 'text', type_options: { required: true } }
                    - { property: 'roles', type: 'choice', type_options: { multiple: true, choices: { 'ROLE_USER': 'ROLE_USER', 'ROLE_PRESS': 'ROLE_PRESS', 'ROLE_REFEREE': 'ROLE_REFEREE', 'ROLE_ORGANISATION': 'ROLE_ORGANISATION', 'ROLE_ADMIN': 'ROLE_ADMIN' } } }
                form_options: { validation_groups: ['Registration'] }
            edit:
                fields:
                    - username
                    - email
                    - firstName
                    - lastName
                    - dateOfBirth
                    - phoneNumber
                    - enabled
                    # if administrators are allowed to edit users' passwords and roles, add this:
                    - { property: 'plainPassword', type: 'text', type_options: { required: false } }
                    - { property: 'roles', type: 'choice', type_options: { multiple: true, choices: { 'ROLE_USER': 'ROLE_USER', 'ROLE_PRESS': 'ROLE_PRESS', 'ROLE_REFEREE': 'ROLE_REFEREE', 'ROLE_ORGANISATION': 'ROLE_ORGANISATION', 'ROLE_ADMIN': 'ROLE_ADMIN' } } }
                form_options: { validation_groups: ['Profile'] }
        SurfaceType:
            class: AppBundle\Entity\SurfaceType
            list:
                fields: ['id', 'surfaceType']
        Tournament:
            class: AppBundle\Entity\Tournament
            list:
                fields: ['id', 'name', 'location', 'startDate', 'endDate', 'numberOfRounds', 'surfaceType']
        Court:
            class: AppBundle\Entity\Court
            list:
                fields: ['id', 'name', 'tournament']
        PlayingCategory:
            class: AppBundle\Entity\PlayingCategory
            list:
                fields: ['id', 'categoryName']
        TournamentPlayingCategory:
            class: AppBundle\Entity\TournamentPlayingCategory
            list:
                fields: ['id', 'tournament', 'playingCategory']
        Country:
            class: AppBundle\Entity\Country
            list:
                fields: ['id', 'code', 'countryName']
        Ranking:
            class: AppBundle\Entity\Ranking
            list:
                fields: ['id', 'player', 'score']
        Player:
            class: AppBundle\Entity\Player
            list:
                fields: ['id', 'firstName', 'lastName', 'gender', 'dateOfBirth', 'country']
        Registration:
            class: AppBundle\Entity\Registration
            list:
                fields: ['id', 'name', 'tournamentPlayingCategory']
        RegistrationPlayer:
            class: AppBundle\Entity\RegistrationPlayer
            list:
                fields: ['id', 'player', 'registration']
        Fixture:
            class: AppBundle\Entity\Fixture
            list:
                fields:
                    - 'id'
                    - 'tournamentPlayingCategory'
                    - 'referee'
                    - 'firstRegistration'
                    - 'secondRegistration'
                    - 'round'
                    - 'startDate'
                    - 'endDate'
                    - 'court'
            form:
                fields:
                    - 'tournamentPlayingCategory'
                    - 'referee'
                    - 'firstRegistration'
                    - 'secondRegistration'
                    - 'round'
                    - 'court'
        SetScore:
            class: AppBundle\Entity\SetScore
            list:
                fields: ['id', 'fixture', 'setNumber', 'firstRegistrationGames', 'secondRegistrationGames']
        GameScore:
            class: AppBundle\Entity\GameScore
            list:
                fields: ['id', 'setScore', 'gameNumber', 'firstRegistrationPoint', 'secondRegistrationPoint', 'playerServing']
        Stat:
            class: AppBundle\Entity\Stat
            list:
                fields: ['id', 'name']
        GameStat:
            class: AppBundle\Entity\GameStat
            list:
                fields: ['id', 'stat', 'gameScore', 'registration', 'datetime']
            form:
                fields: ['stat', 'gameScore', 'registration']
        FixtureResult:
            class: AppBundle\Entity\FixtureResult
            list:
                fields: ['id', 'fixture', 'winner']


gos_web_socket:
    server:
        port: 8080      #The port the socket server will listen on
        host: 0.0.0.0   #The host ip to bind to
        router:
            resources:
                - '@AppBundle/Resources/config/pubsub/routing.yml'
    pushers:
        wamp:
            host: 0.0.0.0
            port: 8080
